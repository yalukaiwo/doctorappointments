let TOKEN = localStorage.getItem("token");

class EditTherapist {
  constructor(id) {
    this.id = id;
  }
  getInfo() {
    const info = new GetInfo().therapist(this.id);
    return info;
  }
  getInputData() {
    const info = new GetInputInfo().therapist();
    return info;
  }
  render() {
    const data = this.getInfo();
    let status;
    if (data.importancy.toLowerCase() === "high") {
      status = `<option value="high" selected>High</option>
        <option value="medium">Medium</option>
        <option value="low">Low</option>`;
    } else if (data.importancy.toLowerCase() === "medium") {
      status = `<option value="high">High</option>
        <option value="medium" selected>Medium</option>
        <option value="low">Low</option>`;
    } else {
      status = `<option value="high">High</option>
        <option value="medium">Medium</option>
        <option value="low" selected>Low</option>`;
    }
    let date = data.date;
    date = date.split("-");
    date.reverse();
    date = date.join("-");
    const form = document.createElement("div");
    form.classList = "card__info-wrapper";
    form.id = `editItem${this.id}`;
    form.innerHTML = `
      <form class="card__short-info">
        <input
          type="text"
          id="editNameInput"
          class="card__name-input"
          value="${data.name}"
        />
        <select id="editDoctorSelect" class="card__doctor-input">
          <option value="cardiologist">Cardiologist</option>
          <option value="dentist">Dentist</option>
          <option value="therapist" selected>Therapist</option>
        </select>
      </form>
      <div class="card__full-info">
        <div class="card__element">
          <p class="card__importancy-text card__text">Importance:</p>
          <select
            id="editImportancySelect"
            class="card__edit-importancy"
          >
            ${status}
          </select>
        </div>
        <div class="card__element">
          <p class="card__goal-text card__text">Visit goal:</p>
          <input
            type="text"
            id="editGoalInput"
            class="card__edit-input"
            value="${data.goal}"
          />
        </div>
        <div class="card__element">
          <p class="card__description-text card__text">Description:</p>
          <input
            type="text"
            id="editDescriptionInput"
            class="card__edit-input"
            value="${data.description}"
          />
        </div>
        <div class="card__element">
          <p class="card__age-text card__text">Due date:</p>
          <input
            type="date"
            id="editDueDateInput"
            class="card__edit-input"
            value="${date}"
          />
        </div>
        <div class="card__element">
          <p class="card__age-text card__text">Age:</p>
          <input
            type="text"
            id="editAgeInput"
            class="card__edit-input"
            value="${data.age}"
          />
        </div>
        <div class="card__edit-buttons buttons">
          <button class="buttons-cancel card__button" id="editCancel${this.id}">Cancel</button>
          <button class="buttons-submit card__button" id="editSubmit${this.id}">Submit</button>
        </div>
      </div>`;
    const root = document.getElementById(`visit${this.id}`);
    root.children[0].style.display = "none";
    root.children[1].style.display = "none";
    root.append(form);
    const cancel = document.getElementById(`editCancel${this.id}`);
    cancel.onclick = () => {
      root.children[root.children.length - 1].remove();
      root.children[0].style.display = "flex";
      root.children[1].style.display = "flex";
    };
    const submit = document.getElementById(`editSubmit${this.id}`);
    submit.onclick = () => {
      const inputData = this.getInputData();
      const update = new VisitTherapist(...inputData);
      update.patch(this.id);
    };
  }
}

class GetInfo {
  therapist(id) {
    const card = document.getElementById(`visit${id}`);
    const shortInfo = card.querySelector(".card__short-info");
    const name = shortInfo.querySelector(".card__name").textContent.trim();
    const fullInfo = card.querySelector(".card__full-info");
    const importance = fullInfo
      .querySelector(".card__importancy-value")
      .textContent.trim();
    const goal = fullInfo.querySelector(".card__goal-value").textContent.trim();
    const description = fullInfo
      .querySelector(".card__description-value")
      .textContent.trim();
    const duedate = fullInfo
      .querySelector(".card__duedate-value")
      .textContent.trim();
    const age = fullInfo.querySelector(".card__age-value").textContent.trim();
    return {
      name: name,
      importancy: importance,
      goal: goal,
      description: description,
      date: duedate,
      age: age,
    };
  }
}

class GetInputInfo {
  therapist() {
    const name = document.getElementById(`editNameInput`).value;
    const importance = document.getElementById(`editImportancySelect`).value;
    const goal = document.getElementById(`editGoalInput`).value;
    const description = document.getElementById(`editDescriptionInput`).value;
    const duedate = document.getElementById(`editDueDateInput`).value;
    const age = document.getElementById(`editAgeInput`).value;
    return [name, importance, goal, description, duedate, age];
  }
}

class Div {
  constructor(classList) {
    this.classList = classList;
  }
  create() {
    const div = document.createElement("div");
    div.classList = this.classList;
    return div;
  }
}

class H {
  constructor(type, classList, text) {
    this.type = type;
    this.classList = classList;
    this.text = text;
  }
  create() {
    const h = document.createElement(this.type);
    h.classList = this.classList;
    h.innerHTML = this.text;
    return h;
  }
}

class Form {
  constructor(classList) {
    this.classList = classList;
  }
  create() {
    const form = document.createElement("form");
    form.classList = this.classList;
    return form;
  }
}

class P {
  constructor(classList, text) {
    this.classList = classList;
    this.text = text;
  }
  create() {
    const p = document.createElement("p");
    p.classList = this.classList;
    p.innerHTML = this.text;
    return p;
  }
}

class Input {
  constructor(type, classList, isRequired, id) {
    this.type = type;
    this.classList = classList;
    this.isRequired = isRequired;
    this.id = id;
  }
  create() {
    const input = document.createElement("input");
    input.id = this.id;
    input.classList = this.classList;
    input.required = this.isRequired;
    input.type = this.type;
    return input;
  }
}
class ButtonToken {
  constructor(classList, text, id, callback) {
    this.classList = classList;
    this.text = text;
    this.id = id;
    this.callback = callback;
  }
  create() {
    const button = document.createElement("button");
    button.classList = this.classList;
    button.id = this.id;
    button.innerHTML = this.text;
    button.onclick = async (e) => {
      e.preventDefault();
      const token = await this.callback();
      if (token) {
        TOKEN = token.data;
        const modal = new Modal();
        modal.closeModal();
        const renderAll = new AllVisits();
        renderAll.render();
        document.getElementById("loginButton").style.display = "none";
        document.getElementById("createButton").style.display = "block";
        localStorage.setItem("token", token.data);
      }
    };
    return button;
  }
}

class ButtonVisit {
  constructor(classList, text, id, callback) {
    this.classList = classList;
    this.text = text;
    this.id = id;
    this.callback = callback;
  }
  create() {
    const button = document.createElement("button");
    button.classList = this.classList;
    button.id = this.id;
    button.innerHTML = this.text;
    button.onclick = async (e) => {
      e.preventDefault();
      const token = await this.callback();
      if (token) {
        TOKEN = token.data;
        const modal = new Modal();
        modal.closeModal();
        const renderAll = new AllVisits();
        renderAll.render();
        document.getElementById("loginButton").style.display = "none";
        document.getElementById("createButton").style.display = "block";
        localStorage.setItem("token", token.data);
      }
    };
    return button;
  }
}

const cardHolder = document.getElementById("cardRoot"),
  nameInput = document.getElementById("nameFilterInput"),
  statusInput = document.getElementById("statusFilterSelect"),
  importancyInput = document.getElementById("importanceFilterSelect");

function filterCards(card) {
  let count = 0;
  const name =
      card.children[0].children[0].children[0].textContent.toLowerCase(),
    date = card.children[0].children[2].children[3].children[1].textContent
      .toLowerCase()
      .split("-"),
    importance =
      card.children[0].children[2].children[0].children[1].textContent.toLowerCase(),
    today = new Date();
  let status;
  if (parseInt(today.getYear()) + 1900 > parseInt(date[2])) {
    status = "done";
  } else if (parseInt(today.getYear()) + 1900 < parseInt(date[2])) {
    status = "open";
  } else if (parseInt(today.getMonth()) > parseInt(date[1]) - 1) {
    status = "done";
  } else if (parseInt(today.getMonth()) < parseInt(date[1]) - 1) {
    status = "open";
  } else if (parseInt(today.getDate()) >= parseInt(date[0])) {
    status = "done";
  } else if (parseInt(today.getDate()) < parseInt(date[0])) {
    status = "open";
  } else {
    status = "open";
  }
  if (
    name.includes(nameInput.value.trim()) &&
    status.includes(statusInput.value) &&
    importance.includes(importancyInput.value)
  ) {
    card.style.display = "block";
    const text1 = document.getElementById("nothingFoundCards");
    text1.style.display = "none";
  } else {
    card.style.display = "none";
    count += 1;
  }
  return count;
}
nameInput.addEventListener("input", () => {
  const cardsList = document.querySelectorAll(".cards__card");
  let numCount = 0;
  cardsList.forEach((card) => {
    numCount += filterCards(card);
    if (numCount === cardsList.length && numCount !== 0) {
      const text1 = document.getElementById("nothingFoundCards");
      text1.style.display = "block";
    }
  });
});

statusInput.onchange = () => {
  const cardsList = document.querySelectorAll(".cards__card");
  let numCount = 0;
  cardsList.forEach((card) => {
    numCount += filterCards(card);
    if (numCount === cardsList.length && numCount !== 0) {
      const text1 = document.getElementById("nothingFoundCards");
      text1.style.display = "block";
    }
  });
};

importancyInput.onchange = () => {
  const cardsList = document.querySelectorAll(".cards__card");
  let numCount = 0;
  cardsList.forEach((card) => {
    numCount += filterCards(card);
    if (numCount === cardsList.length && numCount !== 0) {
      const text1 = document.getElementById("nothingFoundCards");
      text1.style.display = "block";
    }
  });
};

class Modal {
  loginRender() {
    const holder = new Div("page__modal-holder").create();
    holder.id = "modalRoot";
    const modalWindow = new Div("page__modal-window modal").create();
    holder.append(modalWindow);
    const header = new Div("modal__header").create();
    const title = new H("h3", "modal__title", "Login").create();
    const close = new H("h4", "modal__close", "&times;").create();
    close.onclick = () => {
      this.closeModal();
    };
    header.append(title, close);
    const content = new Div("modal__content").create();
    modalWindow.append(header, content);
    const form = new Form("modal__form").create();
    content.append(form);
    const shortInfo = new Div("modal__short-info").create();
    form.append(shortInfo);
    const email = new Div("modal__input-holder").create();
    shortInfo.append(email);
    const emailText = new P("modal__input-text", "Email:").create();
    const emailInput = new Input(
      "email",
      "modal__input",
      true,
      "modalEmailInput"
    ).create();
    email.append(emailText, emailInput);
    const pass = new Div("modal__input-holder").create();
    shortInfo.append(pass);
    const passText = new P("modal__input-text", "Password:").create();
    const passInput = new Input(
      "password",
      "modal__input",
      true,
      "modalPassInput"
    ).create();
    pass.append(passText, passInput);
    const buttonHolder = new Div("modal__button-holder").create();
    form.append(buttonHolder);
    const submit = new ButtonToken(
      "modal__form-submit",
      "Login",
      "modalFormSubmit",
      this.post
    ).create();
    buttonHolder.append(submit);
    return holder;
  }
  loginModal() {
    const modal = this.loginRender();
    document.body.append(modal);
    document.body.style.overflow = "hidden";
  }
  createRender() {
    const holders= new Div("page__modal-holder").create();
    holders.id = "modalRoot";
    holders.innerHTML = `
    <div class="page__modal-window modal">
      <div class="modal__header">
        <h3 class="modal__title">Create new visit</h3>
        <h4 class="modal__close" id = "modal__close">&times;</h4>
      </div>
      <div class="modal__content">
        <form class="modal__form modal__form--cardiologist">
          <div class="modal__short-info">
            <div class="modal__input-holder">
              <p class="modal__input-text">Name:</p>
              <input
                type="text"
                required
                class="modal__input"
                id="modalNameInput"
              />
            </div>
            <div class="modal__input-holder">
              <p class="modal__input-text">Doctor:</p>
              <select class="modal__select modalDoctorInput" id="modalDoctorInput">
                <option value="cardiologist" selected>Cardiologist</option>
                <option value="dentist">Dentist</option>
                <option value="therapist">Therapist</option>
              </select>
            </div>
          </div>
          <div class="modal__full-info">
            <div class="modal__input-holder">
              <p class="modal__input-text">Importancy:</p>
              <select class="modal__select" id="modalImportancyInput">
                <option value="high">High</option>
                <option value="medium">Medium</option>
                <option value="low">Low</option>
              </select>
            </div>
            <div class="modal__input-holder">
              <p class="modal__input-text">Visit goal:</p>
              <input
                type="text"
                required
                class="modal__input"
                id="modalGoalInput"
              />
            </div>
            <div class="modal__input-holder">
              <p class="modal__input-text">Description:</p>
              <input
                type="text"
                required
                class="modal__input"
                id="modalDescInput"
              />
            </div>
            <div class="modal__input-holder ">
              <p class="modal__input-text">Due date:</p>
              <input
                type="date"
                required
                class="modal__input"
                id="modalDateInput"
              />
            </div>
            <div
              class="modal__input-holder modal__input-holder--cardiologist"
            >
              <p class="modal__input-text">Pressure:</p>
              <input
                type="text"
                class="modal__input"
                id="modalPressureInput"
              />
            </div>
            <div
              class="modal__input-holder modal__input-holder--cardiologist" id="modal__input-holder--cardiologist"
            >
              <p class="modal__input-text">Mass index:</p>
              <input
                type="text"
                class="modal__input"
                id="modalMassInput"
              />
            </div>
            <div
              class="modal__input-holder modal__input-holder--cardiologist" id="modal__input-holder--cardiologist"
            >
              <p class="modal__input-text">Deseases:</p>
              <input
                type="text"
                class="modal__input"
                id="modalHeartInput"
              />
            </div>
            <div
              class="modal__input-holder modal__input-holder--cardiologist" id="modal__input-holder--cardiologist"
            >
              <p class="modal__input-text">Age:</p>
              <input
                type="text"
                class="modal__input"
                id="modalCardioAgeInput"
              />
            </div>
            <div class="modal__input-holder modal__input-holder--dentist" id="modal__input-holder--dentist">
              <p class="modal__input-text">Last visit:</p>
              <input
                type="date"
                class="modal__input"
                id="modalVisitInput"
              />
            </div>
            <div class="modal__input-holder modal__input-holder--therapist" id="modal__input-holder--therapist">
              <p class="modal__input-text">Age:</p>
              <input
                type="text"
                class="modal__input"
                id="modalTherapistAgeInput"
              />
            </div>
          </div>
          <div class="modal__button-holder">
            <button class="modal__form-submit" id="modalFormSubmit">
              Create
            </button>
          </div>
        </form>
      </div>
    </div>`;
    document.body.append(holders);
    
  document.addEventListener('change', function(e){
    if(e.target.classList.contains('modalDoctorInput')) {
     
      
      if(e.target.value === 'dentist'){
        const elements = document.getElementsByClassName("modal__input-holder--cardiologist");
      for (const e of elements) {
        e.style.display = e.style.display = 'none';
      }
        document.getElementById("modal__input-holder--dentist").style.display = 'flex';
        document.getElementById("modal__input-holder--therapist").style.display = 'none';
       



        
        
      }
      if(e.target.value === 'cardiologist'){
        const elements = document.getElementsByClassName("modal__input-holder--cardiologist");
      for (const e of elements) {
        e.style.display = e.style.display = 'flex';
      }
        document.getElementById("modal__input-holder--dentist").style.display = 'none';
        document.getElementById("modal__input-holder--therapist").style.display = 'none';
        
        
    }
      if(e.target.value === 'therapist'){
        const elements = document.getElementsByClassName("modal__input-holder--cardiologist");
      for (const e of elements) {
        e.style.display = e.style.display = 'none' ;
      }
        document.getElementById("modal__input-holder--dentist").style.display = 'none';
        document.getElementById("modal__input-holder--therapist").style.display = 'flex';
        
        
    }
      }	
      
       
        
  });
  
      
  
  const close = document.getElementById(`modal__close`);
    close.onclick = () => {
      this.closeModal();
    };
  const submit = document.getElementById(`modalFormSubmit`);
  submit.onclick = () => {
    console.log('FUCK');
      const names = document.getElementById("modalNameInput").value;
        const doctors = document.getElementById("modalDoctorInput").value;
        const importancys = document.getElementById("modalImportancyInput").value;
        const visitGoals = document.getElementById("modalGoalInput").value;
        const descriptions = document.getElementById("modalDescInput").value;
        const dueDates = document.getElementById("modalDateInput").value;
      if(document.getElementById("modalDoctorInput").value === 'dentist'){
        const lastVisits = document.getElementById("modalVisitInput").value;
      const Dantist = new VisitDentist (names, importancys, visitGoals, descriptions, dueDates, lastVisits);
      Dantist.post();
    }else
    if(document.getElementById("modalDoctorInput").value === 'cardiologist'){
      const pressures = document.getElementById("modalPressureInput").value;
      const massIndexs = document.getElementById("modalMassInput").value;
      const heartDeseasess = document.getElementById("modalHeartInput").value;
      const cardioAges = document.getElementById("modalCardioAgeInput").value;
      const Cardio = new VisitCardiologist (names, importancys, visitGoals, descriptions, dueDates,  pressures, massIndexs,heartDeseasess, cardioAges);
      Cardio.post();
    }else
    if(document.getElementById("modalDoctorInput").value === 'therapist'){
      const therapistAges = document.getElementById("modalTherapistAgeInput").value;
      const Therap = new VisitTherapist (names, importancys, visitGoals, descriptions, dueDates, therapistAges);
      Therap.post();
    }
    };
  
  return holders;
  }
  createRender1() {
    const holder = new Div("page__modal-holder").create();
    holder.id = "modalRoots";
    const modalWindow = new Div("page__modal-window modal").create();
    holder.append(modalWindow);
    const header = new Div("modal__header").create();
    const pass1 = new Div("modal__input-holder").create();
    const passText1 = new Select().create();
    pass1.append(passText1);
    const close = new H("h4", "modal__close", "&times;").create();
    close.onclick = () => {
      this.closeModal();
    };
    header.append(pass1, close);
    const content = new Div("modal__content").create();
    modalWindow.append(header, content);
    const form = new Form("modal__form").create();
    content.append(form);
    const shortInfo = new Div("modal__short-info").create();
    form.append(shortInfo);


    const target = new Div("modal__input-holder").create();
    shortInfo.append(target);
    const targetText = new P("modal__input-text", "Цель визита:").create();
    const targetInput = new Input(
      "target",
      "modal__input",
      true,
      "modalTargetInput"
    ).create();
    target.append(targetText, targetInput);

    const shortDiscr = new Div("modal__input-holder").create();
    shortInfo.append(shortDiscr);
    const discrText = new P("modal__input-text", "Описание визита:").create();
    const discrInput = new Input(
      "discription",
      "modal__input",
      true,
      "modalDscriptionInput"
    ).create();
    shortDiscr.append(discrText, discrInput);

    const urgency = new Div("modal__input-holder").create();
    shortInfo.append(urgency);
    const urgencyText = new P("modal__input-text", "Срочность визита:").create();
    const urgencySelect = document.createElement("select");
    urgencySelect.className = 'modal__select';
    const optionDentist = document.createElement("option");
    optionDentist.textContent = 'Обычная';
    optionDentist.value = 'normal';
    const optionCardiolog = document.createElement("option");
    optionCardiolog.textContent = 'Приоритетная';
    optionCardiolog.value = 'private';
    const optionTerapevt = document.createElement("option");
    optionTerapevt.textContent = 'Неотложная';
    optionTerapevt.value = 'high';
    urgencySelect.append(optionDentist,optionCardiolog,optionTerapevt);
    urgency.append(urgencyText, urgencySelect);
    

    document.addEventListener('change', function(e){
      if(e.target.classList.contains('selector')) {
        if(e.target.value === 'Dantist'){console.log('Dantist');
        const fio = new Div("modal__input-holder").create();
        shortInfo.append(fio);
        const fioText = new P("modal__input-text", "ФИО:").create();
        const fioInput = new Input(
          "fio",
          "modal__input",
          true,
          "modalFioInput"
        ).create();
        fio.append(fioText, fioInput);}
        if(e.target.value === 'Cardiolog'){console.log('Cardiolog');}
        if(e.target.value === 'Terapevt'){console.log('Terapevt');}
        }	 
    });
    
    

    const pressure = new Div("modal__input-holder").create();
    shortInfo.append(pressure);
    const pressureText = new P("modal__input-text", "Обычное давление:").create();
    const pressureInput = new Input(
      "pressure",
      "modal__input",
      true,
      "modalPressureInput"
    ).create();
    pressure.append(pressureText, pressureInput);

    const indexMas = new Div("modal__input-holder").create();
    shortInfo.append(indexMas);
    const indexMasText = new P("modal__input-text", "Индекс массы тела:").create();
    const indexMasInput = new Input(
      "indexMas",
      "modal__input",
      true,
      "modalindexMasInput"
    ).create();
    indexMas.append(indexMasText, indexMasInput);
    

    const diseases = new Div("modal__input-holder").create();
    shortInfo.append(diseases);
    const diseasesText = new P("modal__input-text", "Перенесенные заболевания:").create();
    const diseasesInput = new Input(
      "diseases",
      "modal__input",
      true,
      "modalDiseasesInput"
    ).create();
    diseases.append(diseasesText, diseasesInput);

    const age = new Div("modal__input-holder").create();
    shortInfo.append(age);
    const ageText = new P("modal__input-text", "Возраст:").create();
    const ageInput = new Input(
      "age",
      "modal__input",
      true,
      "modalAgeInput"
    ).create();
    age.append(ageText, ageInput);

    const dateDan = new Div("modal__input-holder").create();
    shortInfo.append(dateDan);
    const dateDanText = new P("modal__input-text", "Дата последнего визита:").create();
    const dateDanInput = new Input(
      "dateDan",
      "modal__input",
      true,
      "modalDateDanInput"
    ).create();
    dateDan.append(dateDanText, dateDanInput);


    const buttonSubmit = new Div("modal__button-holder").create();
    form.append(buttonSubmit);
    const submit = new ButtonToken(
      "modal__form-submit",
      "Submit",
      "modalFormSubmit",
      this.post
    ).create();
    buttonSubmit.append(submit);
    return holder;
  }
  createModal() {
    const modal = this.createRender();
    document.body.append(modal);
    document.body.style.overflow = "hidden";
  }
  async post() {
    if (
      document.getElementById("modalEmailInput").value !== "" &&
      document.getElementById("modalPassInput").value !== ""
    ) {
      return await axios({
        url: "https://ajax.test-danit.com/api/v2/cards/login",
        method: "post",
        headers: {
          "Content-Type": "application/json",
        },
        data: {
          email: document.getElementById("modalEmailInput").value,
          password: document.getElementById("modalPassInput").value,
        },
      }).catch(function (e) {
        document.querySelectorAll(".modal__input").forEach((item) => {
          item.style.borderBottom = "1px solid red";
        });
      });
    }
  }
  closeModal() {
    const modal = document.getElementById("modalRoot");
    modal.remove();
    document.body.style.overflow = "visible";
  }
}

class Visit {
  constructor(name, doctor, importancy, goal, description, date) {
    this.name = name;
    this.doctor = doctor;
    this.importancy = importancy;
    this.goal = goal;
    this.description = description;
    this.date = date;
  }
}
class VisitDelete {
  async delete(id) {
    let response = await axios({
      url: `https://ajax.test-danit.com/api/v2/cards/${id}`,
      method: "delete",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${TOKEN}`,
      },
    });
    if (response.status === 200) {
      this.remov(id);
    }
  }
  remov(id) {
    const cardDelete = document.getElementById(`visit${id}`);
    cardDelete.remove();
    const cards = document.querySelectorAll(".card");
    if (cards.length === 0) {
      document.getElementById("noCardsAdded").style.display = "block";
    }
  }
}
class VisitDentist extends Visit {
  constructor(name, importancy, goal, description, date, lastVisit) {
    super(name, "Dentist", importancy, goal, description, date);
    this.lastVisit = lastVisit;
  }
  async post() {
    let response = await axios({
      url: "https://ajax.test-danit.com/api/v2/cards/",
      method: "post",
      data: {
        name: this.name,
        description: this.description,
        doctor: this.doctor,
        importancy: this.importancy,
        goal: this.goal,
        date: this.date,
        lastVisit: this.lastVisit,
      },
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${TOKEN}`,
      },
    });
    const card = this.render(response.data.id);
    const root = document.getElementById("cardRoot");
    root.append(card);
  }

  render(id) {
    const text = document.getElementById("noCardsAdded");
    text.style.display = "none";
    const card = document.createElement("div");
    card.classList = "cards__card card";
    card.id = `visit${id}`;
    card.innerHTML = `
            <div class="card__info-wrapper">
              <div class="card__short-info">
                <h3 class="card__name">${this.name}</h3>
                <h4 class="card__doctor">Dentist</h4>
              </div>
              <div class="card__options options">
                <div class="options__short">
                  <img src="./dist/img/trash.png" alt="delete" class="options__icon" id="delete${id}">
                </div>
                <div class="options__long">
                  <img src="./dist/img/edit.png" alt="edit" class="options__icon" id="edit${id}">
                </div>
              </div>
              <div class="card__full-info">
                <div class="card__element">
                  <p class="card__importancy-text card__text">Importancy:</p>
                  <p class="card__importancy-value card__value">${
                    this.importancy
                  }</p>
                </div>
                <div class="card__element">
                  <p class="card__goal-text card__text">Visit goal:</p>
                  <p class="card__goal-value card__value">
                    ${this.goal}
                  </p>
                </div>
                <div class="card__element">
                  <p class="card__description-text card__text">Description:</p>
                  <p class="card__description-value card__value">
                    ${this.description}
                  </p>
                </div>
                <div class="card__element">
                  <p class="card__description-text card__text">Due date:</p>
                  <p class="card__duedate-value card__value">
                    ${this.date.split("-").reverse().join("-")}
                  </p>
                </div>
                <div class="card__element">
                  <p class="card__problems-text card__text">Last visit:</p>
                  <p class="card__lastvisit-value card__value">${
                    this.lastVisit
                  }</p>
                </div>
              </div>
            </div>
            <p class="card__showmore" id="showmore${id}">Show more</p>`;
    return card;
  }
  async patch(id) {
    let response = await axios({
      url: `https://ajax.test-danit.com/api/v2/cards/${id}`,
      method: "put",
      data: {
        name: this.name,
        description: this.description,
        doctor: this.doctor,
        importancy: this.importancy,
        goal: this.goal,
        date: this.date,
        lastVisit: this.lastVisit,
      },
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${TOKEN}`,
      },
    });
    if (response.status === 200) {
      const root = document.getElementById(`visit${id}`);
      const card = this.render(id);
      console.log(this.render(id));
      root.innerHTML = card.innerHTML;
      console.log(root);
    }
  }
}
class VisitCardiologist extends Visit {
  constructor(
    name,
    importancy,
    goal,
    description,
    date,
    pressure,
    massIndex,
    heartDeseases,
    age
  ) {
    super(name, "Cardiologist", importancy, goal, description, date);
    this.pressure = pressure;
    this.massIndex = massIndex;
    this.heartDeseases = heartDeseases;
    this.age = age;
  }
  async post() {
    let response = await axios({
      url: "https://ajax.test-danit.com/api/v2/cards/",
      method: "post",
      data: {
        name: this.name,
        description: this.description,
        doctor: this.doctor,
        importancy: this.importancy,
        goal: this.goal,
        date: this.date,
        pressure: this.pressure,
        massIndex: this.massIndex,
        heartDeseases: this.heartDeseases,
        age: this.age,
      },
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${TOKEN}`,
      },
    });
    const root = document.getElementById("cardRoot");
    const card = this.render(response.data.id);
    root.append(card);
  }

  render(id) {
    const text = document.getElementById("noCardsAdded");
    text.style.display = "none";
    const card = document.createElement("div");
    card.classList = "cards__card card";
    card.id = `visit${id}`;
    card.innerHTML = `
            <div class="card__info-wrapper">
              <div class="card__short-info">
                <h3 class="card__name">${this.name}</h3>
                <h4 class="card__doctor">${this.doctor}</h4>
              </div>
              <div class="card__options options">
                <div class="options__short">
                  <img
                    src="./dist/img/trash.png"
                    alt="delete"
                    class="options__icon"
                    id="delete${id}"
                  />
                </div>
                <div class="options__long">
                  <img
                    src="./dist/img/edit.png"
                    alt="edit"
                    class="options__icon"
                    id="edit${id}"
                  />
                </div>
              </div>
              <div class="card__full-info">
                <div class="card__element">
                  <p class="card__importancy-text card__text">Importancy:</p>
                  <p class="card__importancy-value card__value">${
                    this.importancy
                  }</p>
                </div>
                <div class="card__element">
                  <p class="card__goal-text card__text">Visit goal:</p>
                  <p class="card__goal-value card__value">
                    ${this.goal}
                  </p>
                </div>
                <div class="card__element">
                  <p class="card__description-text card__text">Description:</p>
                  <p class="card__description-value card__value">
                    ${this.description}
                  </p>
                </div>
                <div class="card__element">
                  <p class="card__date-text card__text">Due date:</p>
                  <p class="card__duedate-value card__value">${this.date
                    .split("-")
                    .reverse()
                    .join("-")}</p>
                </div>
                <div class="card__element">
                  <p class="card__pressure-text card__text">Pressure:</p>
                  <p class="card__pressure-value card__value">${
                    this.pressure
                  }</p>
                </div>
                <div class="card__element">
                  <p class="card__mass-text card__text">Mass index:</p>
                  <p class="card__mass-value card__value">${this.massIndex}</p>
                </div>
                <div class="card__element">
                  <p class="card__problems-text card__text">Heart diseases:</p>
                  <p class="card__problems-value card__value">${
                    this.heartDeseases
                  }</p>
                </div>
                <div class="card__element">
                  <p class="card__age-text card__text">Age:</p>
                  <p class="card__age-value card__value">${this.age}</p>
                </div>
              </div>
            </div>
            <p class="card__showmore" id="showmore${id}">Show more</p>
`;
    return card;
  }
  edit() {}
}
class VisitTherapist extends Visit {
  constructor(name, importancy, goal, description, date, age) {
    super(name, "Therapist", importancy, goal, description, date);
    this.age = age;
  }
  async post() {
    let response = await axios({
      url: "https://ajax.test-danit.com/api/v2/cards/",
      method: "post",
      data: {
        name: this.name,
        description: this.description,
        doctor: this.doctor,
        importancy: this.importancy,
        goal: this.goal,
        date: this.date,
        age: this.age,
      },
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${TOKEN}`,
      },
    });
    const card = this.render(response.data.id);
    const root = document.getElementById("cardRoot");
    root.append(card);
  }
  async patch(id) {
    let response = await axios({
      url: `https://ajax.test-danit.com/api/v2/cards/${id}`,
      method: "put",
      data: {
        name: this.name,
        description: this.description,
        doctor: this.doctor,
        importancy: this.importancy,
        goal: this.goal,
        date: this.date,
        age: this.age,
      },
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${TOKEN}`,
      },
    });
    if (response.status === 200) {
      const root = document.getElementById(`visit${id}`);
      const card = this.render(id);
      root.innerHTML = card.innerHTML;
    }
  }
  render(id) {
    const text = document.getElementById("noCardsAdded");
    text.style.display = "none";
    const card = document.createElement("div");
    card.classList = "cards__card card";
    card.id = `visit${id}`;
    card.innerHTML = `
            <div class="card__info-wrapper">
              <div class="card__short-info">
                <h3 class="card__name">${this.name}</h3>
                <h4 class="card__doctor">Therapist</h4>
              </div>
              <div class="card__options options">
                <div class="options__short">
                  <img src="./dist/img/trash.png" alt="delete" class="options__icon" id="delete${id}">
                </div>
                <div class="options__long">
                  <img src="./dist/img/edit.png" alt="edit" class="options__icon" id="edit${id}">
                </div>
              </div>
              <div class="card__full-info">
                <div class="card__element">
                  <p class="card__importancy-text card__text">Importancy:</p>
                  <p class="card__importancy-value card__value">${
                    this.importancy.charAt(0).toUpperCase() +
                    this.importancy.slice(1)
                  }</p>
                </div>
                <div class="card__element">
                  <p class="card__goal-text card__text">Visit goal:</p>
                  <p class="card__goal-value card__value">
                    ${this.goal}
                  </p>
                </div>
                <div class="card__element">
                  <p class="card__description-text card__text">Description:</p>
                  <p class="card__description-value card__value">
                   ${this.description}
                  </p>
                </div>
                <div class="card__element">
                  <p class="card__description-text card__text">Due date:</p>
                  <p class="card__duedate-value card__value">
                   ${this.date.split("-").reverse().join("-")}
                  </p>
                </div>
                <div class="card__element">
                  <p class="card__age-text card__text">Age:</p>
                  <p class="card__age-value card__value">${this.age}</p>
                </div>
              </div>
            </div>
            <p class="card__showmore" id="showmore${id}">Show more</p>`;
    return card;
  }
}
class AllVisits {
  async get() {
    return await axios({
      url: "https://ajax.test-danit.com/api/v2/cards",
      method: "get",
      headers: {
        Authorization: `Bearer ${TOKEN}`,
      },
    });
  }
  async render() {
    const data = await this.get();
    const root = document.getElementById("cardRoot");
    data.data.forEach((element) => {
      if (element.doctor === "Therapist") {
        const visit = new VisitTherapist(
          element.name.toString(),
          element.importancy.toString(),
          element.goal.toString(),
          element.description.toString(),
          element.date.toString(),
          element.age.toString()
        );
        root.append(visit.render(element.id));
      } else if (element.doctor === "Dentist") {
        const visit = new VisitDentist(
          element.name.toString(),
          element.importancy.toString(),
          element.goal.toString(),
          element.description.toString(),
          element.date.toString(),
          element.lastVisit.toString()
        );
        root.append(visit.render(element.id));
      } else if (element.doctor === "Cardiologist") {
        const visit = new VisitCardiologist(
          element.name.toString(),
          element.importancy.toString(),
          element.goal.toString(),
          element.description.toString(),
          element.date.toString(),
          element.pressure.toString(),
          element.massIndex.toString(),
          element.heartDeseases.toString(),
          element.age.toString()
        );
        root.append(visit.render(element.id));
      }
    });
  }
}

const switchBtn = document.getElementById("filterSwitch");
const menu = document.getElementById("filtersForm");

switchBtn.addEventListener("click", () => {
  menu.classList.toggle("main__filters--active");
});

const cards = document.getElementById("cardRoot");

cards.addEventListener("click", (e) => {
  if (e.target.id.includes("showmore")) {
    el = e.target;
    const id = "visit" + el.id.split("showmore")[1];
    document.getElementById(id).classList.toggle("card--open");
    if (document.getElementById(id).classList.contains("card--open")) {
      el.textContent = "Show less";
    } else {
      el.textContent = "Show more";
    }
  }
  if (e.target.id.includes("delete")) {
    el = e.target;
    const id = el.id.split("delete")[1];
    const visit = new VisitDelete();
    visit.delete(id);
  }
  if (
    e.target.id.includes("edit") &&
    e.target.classList.contains("options__icon")
  ) {
    if (
      e.target.closest(".card").children[0].children[0].children[1]
        .textContent === "Therapist"
    ) {
      const edit = new EditTherapist(e.target.id.split("edit")[1]);
      edit.render();
    }
  }
});

if (TOKEN === null) {
  const login = document.getElementById("loginButton");

  login.addEventListener("click", (e) => {
    e.preventDefault();
    const modal = new Modal();
    modal.loginModal();
  });
} else {
  const login = document.getElementById("loginButton");
  login.style.display = "none";
  const create = document.getElementById("createButton");
  create.style.display = "block";
 
  create.addEventListener("click", (e) => {
    e.preventDefault();
    const modal = new Modal();
    modal.createModal();
    
  });
  const renderAll = new AllVisits();
  renderAll.render();
}



