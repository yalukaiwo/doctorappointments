class EditTherapist {
  constructor(id) {
    this.id = id;
  }
  getInfo() {
    const info = new GetInfo().therapist(this.id);
    return info;
  }
  getInputData() {
    const info = new GetInputInfo().therapist(this.id);
    return info;
  }
  render() {
    const data = this.getInfo();
    let status;
    if (data.importancy.toLowerCase() === "high") {
      status = `<option value="high" selected>High</option>
        <option value="medium">Medium</option>
        <option value="low">Low</option>`;
    } else if (data.importancy.toLowerCase() === "medium") {
      status = `<option value="high">High</option>
        <option value="medium" selected>Medium</option>
        <option value="low">Low</option>`;
    } else {
      status = `<option value="high">High</option>
        <option value="medium">Medium</option>
        <option value="low" selected>Low</option>`;
    }
    let date = data.date;
    date = date.split("-");
    date.reverse();
    date = date.join("-");
    const form = document.createElement("div");
    form.classList = "card__info-wrapper";
    form.id = `editItem${this.id}`;
    form.innerHTML = `
      <form class="card__short-info">
        <input
          type="text"
          id="editNameInput"
          class="card__name-input"
          value="${data.name}"
        />
        <select id="editDoctorSelect" class="card__doctor-input">
          <option value="cardiologist">Cardiologist</option>
          <option value="dentist">Dentist</option>
          <option value="therapist" selected>Therapist</option>
        </select>
      </form>
      <div class="card__full-info">
        <div class="card__element">
          <p class="card__importancy-text card__text">Importance:</p>
          <select
            id="editImportancySelect"
            class="card__edit-importancy"
          >
            ${status}
          </select>
        </div>
        <div class="card__element">
          <p class="card__goal-text card__text">Visit goal:</p>
          <input
            type="text"
            id="editGoalInput"
            class="card__edit-input"
            value="${data.goal}"
          />
        </div>
        <div class="card__element">
          <p class="card__description-text card__text">Description:</p>
          <input
            type="text"
            id="editDescriptionInput"
            class="card__edit-input"
            value="${data.description}"
          />
        </div>
        <div class="card__element">
          <p class="card__age-text card__text">Due date:</p>
          <input
            type="date"
            id="editDueDateInput"
            class="card__edit-input"
            value="${date}"
          />
        </div>
        <div class="card__element">
          <p class="card__age-text card__text">Age:</p>
          <input
            type="text"
            id="editAgeInput"
            class="card__edit-input"
            value="${data.age}"
          />
        </div>
        <div class="card__edit-buttons buttons">
          <button class="buttons-cancel card__button" id="editCancel${this.id}">Cancel</button>
          <button class="buttons-submit card__button" id="editSubmit${this.id}">Submit</button>
        </div>
      </div>`;
    const root = document.getElementById(`visit${this.id}`);
    root.children[0].style.display = "none";
    root.children[1].style.display = "none";
    root.append(form);
    const cancel = document.getElementById(`editCancel${this.id}`);
    cancel.onclick = () => {
      root.children[root.children.length - 1].remove();
      root.children[0].style.display = "flex";
      root.children[1].style.display = "flex";
    };
    const submit = document.getElementById(`editSubmit${this.id}`);
    submit.onclick = () => {
      const inputData = this.getInputData();
      const update = new VisitTherapist(...inputData);
      update.patch(this.id);
    };
  }
}

class GetInfo {
  therapist(id) {
    const card = document.getElementById(`visit${id}`);
    const shortInfo = card.querySelector(".card__short-info");
    const name = shortInfo.querySelector(".card__name").textContent.trim();
    const fullInfo = card.querySelector(".card__full-info");
    const importance = fullInfo
      .querySelector(".card__importancy-value")
      .textContent.trim();
    const goal = fullInfo.querySelector(".card__goal-value").textContent.trim();
    const description = fullInfo
      .querySelector(".card__description-value")
      .textContent.trim();
    const duedate = fullInfo
      .querySelector(".card__duedate-value")
      .textContent.trim();
    const age = fullInfo.querySelector(".card__age-value").textContent.trim();
    return {
      name: name,
      importancy: importance,
      goal: goal,
      description: description,
      date: duedate,
      age: age,
    };
  }
}

class GetInputInfo {
  therapist(id) {
    const name = document.getElementById(`editNameInput`).value;
    const importance = document.getElementById(`editImportancySelect`).value;
    const goal = document.getElementById(`editGoalInput`).value;
    const description = document.getElementById(`editDescriptionInput`).value;
    const duedate = document.getElementById(`editDueDateInput`).value;
    const age = document.getElementById(`editAgeInput`).value;
    return [name, importance, goal, description, duedate, age];
  }
}

class Div {
  constructor(classList) {
    this.classList = classList;
  }
  create() {
    const div = document.createElement("div");
    div.classList = this.classList;
    return div;
  }
}

class H {
  constructor(type, classList, text) {
    this.type = type;
    this.classList = classList;
    this.text = text;
  }
  create() {
    const h = document.createElement(this.type);
    h.classList = this.classList;
    h.innerHTML = this.text;
    return h;
  }
}

class Form {
  constructor(classList) {
    this.classList = classList;
  }
  create() {
    const form = document.createElement("form");
    form.classList = this.classList;
    return form;
  }
}

class P {
  constructor(classList, text) {
    this.classList = classList;
    this.text = text;
  }
  create() {
    const p = document.createElement("p");
    p.classList = this.classList;
    p.innerHTML = this.text;
    return p;
  }
}

class Input {
  constructor(type, classList, isRequired, id) {
    this.type = type;
    this.classList = classList;
    this.isRequired = isRequired;
    this.id = id;
  }
  create() {
    const input = document.createElement("input");
    input.id = this.id;
    input.classList = this.classList;
    input.required = this.isRequired;
    input.type = this.type;
    return input;
  }
}

class Div {
  constructor(classList) {
    this.classList = classList;
  }
  create() {
    const div = document.createElement("div");
    div.classList = this.classList;
    return div;
  }
}

class H {
  constructor(type, classList, text) {
    this.type = type;
    this.classList = classList;
    this.text = text;
  }
  create() {
    const h = document.createElement(this.type);
    h.classList = this.classList;
    h.innerHTML = this.text;
    return h;
  }
}

class Form {
  constructor(classList) {
    this.classList = classList;
  }
  create() {
    const form = document.createElement("form");
    form.classList = this.classList;
    return form;
  }
}

class P {
  constructor(classList, text) {
    this.classList = classList;
    this.text = text;
  }
  create() {
    const p = document.createElement("p");
    p.classList = this.classList;
    p.innerHTML = this.text;
    return p;
  }
}

class Input {
  constructor(type, classList, isRequired, id) {
    this.type = type;
    this.classList = classList;
    this.isRequired = isRequired;
    this.id = id;
  }
  create() {
    const input = document.createElement("input");
    input.id = this.id;
    input.classList = this.classList;
    input.required = this.isRequired;
    input.type = this.type;
    return input;
  }
}

class Button {
  constructor(classList, text, id, callback) {
    this.classList = classList;
    this.text = text;
    this.id = id;
    this.callback = callback;
  }
  create() {
    const button = document.createElement("button");
    button.classList = this.classList;
    button.id = this.id;
    button.innerHTML = this.text;
    button.onclick = (e) => {
      e.preventDefault();
      this.callback();
    };
    return button;
  }
}

const cardHolder = document.getElementById("cardRoot"),
  nameInput = document.getElementById("nameFilterInput"),
  statusInput = document.getElementById("statusFilterSelect"),
  importancyInput = document.getElementById("importanceFilterSelect");

function filterCards(card) {
  let count = 0;
  const name =
      card.children[0].children[0].children[0].textContent.toLowerCase(),
    date = card.children[0].children[2].children[3].children[1].textContent
      .toLowerCase()
      .split("-"),
    importance =
      card.children[0].children[2].children[0].children[1].textContent.toLowerCase(),
    today = new Date();
  let status;
  if (parseInt(today.getYear()) + 1900 > parseInt(date[2])) {
    status = "done";
  } else if (parseInt(today.getYear()) + 1900 < parseInt(date[2])) {
    status = "open";
  } else if (parseInt(today.getMonth()) > parseInt(date[1]) - 1) {
    status = "done";
  } else if (parseInt(today.getMonth()) < parseInt(date[1]) - 1) {
    status = "open";
  } else if (parseInt(today.getDate()) >= parseInt(date[0])) {
    status = "done";
  } else if (parseInt(today.getDate()) < parseInt(date[0])) {
    status = "open";
  } else {
    status = "open";
  }
  if (
    name.includes(nameInput.value.trim()) &&
    status.includes(statusInput.value) &&
    importance.includes(importancyInput.value)
  ) {
    card.style.display = "block";
    const text1 = document.getElementById("nothingFoundCards");
    text1.style.display = "none";
  } else {
    card.style.display = "none";
    count += 1;
  }
  return count;
}
nameInput.addEventListener("input", () => {
  const cardsList = document.querySelectorAll(".cards__card");
  let numCount = 0;
  cardsList.forEach((card) => {
    numCount += filterCards(card);
    if (numCount === cardsList.length && numCount !== 0) {
      const text1 = document.getElementById("nothingFoundCards");
      text1.style.display = "block";
    }
  });
});

statusInput.onchange = () => {
  const cardsList = document.querySelectorAll(".cards__card");
  let numCount = 0;
  cardsList.forEach((card) => {
    numCount += filterCards(card);
    if (numCount === cardsList.length && numCount !== 0) {
      const text1 = document.getElementById("nothingFoundCards");
      text1.style.display = "block";
    }
  });
};

importancyInput.onchange = () => {
  const cardsList = document.querySelectorAll(".cards__card");
  let numCount = 0;
  cardsList.forEach((card) => {
    numCount += filterCards(card);
    if (numCount === cardsList.length && numCount !== 0) {
      const text1 = document.getElementById("nothingFoundCards");
      text1.style.display = "block";
    }
  });
};

class Modal {
  loginRender() {
    const holder = new Div("page__modal-holder").create();
    holder.id = "modalRoot";
    const modalWindow = new Div("page__modal-window modal").create();
    holder.append(modalWindow);
    const header = new Div("modal__header").create();
    const title = new H("h3", "modal__title", "Login").create();
    const close = new H("h4", "modal__close", "&times;").create();
    header.append(title, close);
    const content = new Div("modal__content").create();
    modalWindow.append(header, content);
    const form = new Form("modal__form").create();
    content.append(form);
    const shortInfo = new Div("modal__short-info").create();
    form.append(shortInfo);
    const email = new Div("modal__input-holder").create();
    shortInfo.append(email);
    const emailText = new P("modal__input-text", "Email:").create();
    const emailInput = new Input(
      "email",
      "modal__input",
      true,
      "modalEmailInput"
    ).create();
    email.append(emailText, emailInput);
    const pass = new Div("modal__input-holder").create();
    shortInfo.append(pass);
    const passText = new P("modal__input-text", "Password:").create();
    const passInput = new Input(
      "password",
      "modal__input",
      true,
      "modalPassInput"
    ).create();
    pass.append(passText, passInput);
    const buttonHolder = new Div("modal__button-holder").create();
    form.append(buttonHolder);
    const submit = new Button(
      "modal__form-submit",
      "Login",
      "modalFormSubmit",
      callback
    ).create();
    buttonHolder.append(submit);
    return holder;
  }
  loginModal() {
    const modal = this.loginRender();
    document.body.append(modal);
    document.body.style.overflow = "hidden";
    // const
  }
  async post() {
    try {
      if (
        document.getElementById("modalEmailInput").value !== "" &&
        document.getElementById("modalPassInput").value !== ""
      ) {
        const response = await axios({
          url: "https://ajax.test-danit.com/api/v2/cards/login",
          method: "post",
          headers: {
            "Content-Type": "application/json",
          },
          data: {
            email: document.getElementById("modalEmailInput").value,
            password: document.getElementById("modalPassInput").value,
          },
        });
      }
    } catch (e) {
      document.querySelectorAll(".modal__input").forEach((item) => {
        item.style.borderBottom = "1px solid red";
      });
    }
  }
}

class Visit {
  constructor(name, doctor, importancy, goal, description, date) {
    this.name = name;
    this.doctor = doctor;
    this.importancy = importancy;
    this.goal = goal;
    this.description = description;
    this.date = date;
  }
}
class VisitDelete {
  async delete(id) {
    let response = await axios({
      url: `https://ajax.test-danit.com/api/v2/cards/${id}`,
      method: "delete",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer 04a749a6-0cb8-43ca-9511-6bc6d5fa9396`,
      },
    });
    if (response.status === 200) {
      this.remov(id);
    }
  }
  remov(id) {
    const cardDelete = document.getElementById(`visit${id}`);
    cardDelete.remove();
    const cards = document.querySelectorAll(".card");
    if (cards.length === 0) {
      document.getElementById("noCardsAdded").style.display = "block";
    }
  }
}
class VisitDentist extends Visit {
  constructor(name, importancy, goal, description, date, lastVisit) {
    super(name, "Dentist", importancy, goal, description, date);
    this.lastVisit = lastVisit;
  }
  async post() {
    let response = await axios({
      url: "https://ajax.test-danit.com/api/v2/cards/",
      method: "post",
      data: {
        name: this.name,
        description: this.description,
        doctor: this.doctor,
        importancy: this.importancy,
        goal: this.goal,
        date: this.date,
        lastVisit: this.lastVisit,
      },
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer 04a749a6-0cb8-43ca-9511-6bc6d5fa9396`,
      },
    });
    const card = this.render(response.data.id);
    const root = document.getElementById("cardRoot");
    root.append(card);
  }

  render(id) {
    const text = document.getElementById("noCardsAdded");
    text.style.display = "none";
    const card = document.createElement("div");
    card.classList = "cards__card card";
    card.id = `visit${id}`;
    card.innerHTML = `
            <div class="card__info-wrapper">
              <div class="card__short-info">
                <h3 class="card__name">${this.name}</h3>
                <h4 class="card__doctor">Dentist</h4>
              </div>
              <div class="card__options options">
                <div class="options__short">
                  <img src="./dist/img/trash.png" alt="delete" class="options__icon" id="delete${id}">
                </div>
                <div class="options__long">
                  <img src="./dist/img/edit.png" alt="edit" class="options__icon" id="edit${id}">
                </div>
              </div>
              <div class="card__full-info">
                <div class="card__element">
                  <p class="card__importancy-text card__text">Importancy:</p>
                  <p class="card__importancy-value card__value">${
                    this.importancy
                  }</p>
                </div>
                <div class="card__element">
                  <p class="card__goal-text card__text">Visit goal:</p>
                  <p class="card__goal-value card__value">
                    ${this.goal}
                  </p>
                </div>
                <div class="card__element">
                  <p class="card__description-text card__text">Description:</p>
                  <p class="card__description-value card__value">
                    ${this.description}
                  </p>
                </div>
                <div class="card__element">
                  <p class="card__description-text card__text">Due date:</p>
                  <p class="card__duedate-value card__value">
                    ${this.date.split("-").reverse().join("-")}
                  </p>
                </div>
                <div class="card__element">
                  <p class="card__problems-text card__text">Last visit:</p>
                  <p class="card__lastvisit-value card__value">${
                    this.lastVisit
                  }</p>
                </div>
              </div>
            </div>
            <p class="card__showmore" id="showmore${id}">Show more</p>`;
    return card;
  }
  async patch(id) {
    let response = await axios({
      url: `https://ajax.test-danit.com/api/v2/cards/${id}`,
      method: "put",
      data: {
        name: this.name,
        description: this.description,
        doctor: this.doctor,
        importancy: this.importancy,
        goal: this.goal,
        date: this.date,
        lastVisit: this.lastVisit,
      },
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer 04a749a6-0cb8-43ca-9511-6bc6d5fa9396`,
      },
    });
    if (response.status === 200) {
      const root = document.getElementById(`visit${id}`);
      const card = this.render(id);
      console.log(this.render(id));
      root.innerHTML = card.innerHTML;
      console.log(root);
    }
  }
}
class VisitCardiologist extends Visit {
  constructor(
    name,
    importancy,
    goal,
    description,
    date,
    pressure,
    massIndex,
    heartDeseases,
    age
  ) {
    super(name, "Cardiologist", importancy, goal, description, date);
    this.pressure = pressure;
    this.massIndex = massIndex;
    this.heartDeseases = heartDeseases;
    this.age = age;
  }
  async post() {
    let response = await axios({
      url: "https://ajax.test-danit.com/api/v2/cards/",
      method: "post",
      data: {
        name: this.name,
        description: this.description,
        doctor: this.doctor,
        importancy: this.importancy,
        goal: this.goal,
        date: this.date,
        pressure: this.pressure,
        massIndex: this.massIndex,
        heartDeseases: this.heartDeseases,
        age: this.age,
      },
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer 04a749a6-0cb8-43ca-9511-6bc6d5fa9396`,
      },
    });
    const root = document.getElementById("cardRoot");
    const card = this.render(response.data.id);
    root.append(card);
  }

class Visit {
  constructor(name, doctor, importancy, goal, description, date) {
    this.name = name;
    this.doctor = doctor;
    this.importancy = importancy;
    this.goal = goal;
    this.description = description;
    this.date = date;
  }
}
class VisitDelete {
  async delete(id) {
    let response = await axios({
      url: `https://ajax.test-danit.com/api/v2/cards/${id}`,
      method: "delete",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer 04a749a6-0cb8-43ca-9511-6bc6d5fa9396`,
      },
    });
    if (response.status === 200) {
      this.remov(id);
    }
  }
  remov(id) {
    const cardDelete = document.getElementById(`visit${id}`);
    cardDelete.remove();
    const cards = document.querySelectorAll(".card");
    if (cards.length === 0) {
      document.getElementById("noCardsAdded").style.display = "block";
    }
  }
}
class VisitDentist extends Visit {
  constructor(name, importancy, goal, description, date, lastVisit) {
    super(name, "Dentist", importancy, goal, description, date);
    this.lastVisit = lastVisit;
  }
  async post() {
    let response = await axios({
      url: "https://ajax.test-danit.com/api/v2/cards/",
      method: "post",
      data: {
        name: this.name,
        description: this.description,
        doctor: this.doctor,
        importancy: this.importancy,
        goal: this.goal,
        date: this.date,
        lastVisit: this.lastVisit,
      },
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer 04a749a6-0cb8-43ca-9511-6bc6d5fa9396`,
      },
    });
    const card = this.render(response.data.id);
    const root = document.getElementById("cardRoot");
    root.append(card);
  }

  render(id) {
    const text = document.getElementById("noCardsAdded");
    text.style.display = "none";
    const card = document.createElement("div");
    card.classList = "cards__card card";
    card.id = `visit${id}`;
    card.innerHTML = `
            <div class="card__info-wrapper">
              <div class="card__short-info">
                <h3 class="card__name">${this.name}</h3>
                <h4 class="card__doctor">Dentist</h4>
              </div>
              <div class="card__options options">
                <div class="options__short">
                  <img src="./dist/img/trash.png" alt="delete" class="options__icon" id="delete${id}">
                </div>
                <div class="options__long">
                  <img src="./dist/img/edit.png" alt="edit" class="options__icon" id="edit${id}">
                </div>
              </div>
              <div class="card__full-info">
                <div class="card__element">
                  <p class="card__importancy-text card__text">Importancy:</p>
                  <p class="card__importancy-value card__value">${
                    this.importancy
                  }</p>
                </div>
                <div class="card__element">
                  <p class="card__goal-text card__text">Visit goal:</p>
                  <p class="card__goal-value card__value">
                    ${this.goal}
                  </p>
                </div>
                <div class="card__element">
                  <p class="card__description-text card__text">Description:</p>
                  <p class="card__description-value card__value">
                    ${this.description}
                  </p>
                </div>
                <div class="card__element">
                  <p class="card__description-text card__text">Due date:</p>
                  <p class="card__duedate-value card__value">
                    ${this.date.split("-").reverse().join("-")}
                  </p>
                </div>
                <div class="card__element">
                  <p class="card__problems-text card__text">Last visit:</p>
                  <p class="card__lastvisit-value card__value">${
                    this.lastVisit
                  }</p>
                </div>
              </div>
            </div>
            <p class="card__showmore" id="showmore${id}">Show more</p>`;
    return card;
  }
  async patch(id) {
    let response = await axios({
      url: `https://ajax.test-danit.com/api/v2/cards/${id}`,
      method: "put",
      data: {
        name: this.name,
        description: this.description,
        doctor: this.doctor,
        importancy: this.importancy,
        goal: this.goal,
        date: this.date,
        lastVisit: this.lastVisit,
      },
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer 04a749a6-0cb8-43ca-9511-6bc6d5fa9396`,
      },
    });
    if (response.status === 200) {
      const root = document.getElementById(`visit${id}`);
      const card = this.render(id);
      console.log(this.render(id));
      root.innerHTML = card.innerHTML;
      console.log(root);
    }
  }
}
class VisitCardiologist extends Visit {
  constructor(
    name,
    importancy,
    goal,
    description,
    date,
    pressure,
    massIndex,
    heartDeseases,
    age
  ) {
    super(name, "Cardiologist", importancy, goal, description, date);
    this.pressure = pressure;
    this.massIndex = massIndex;
    this.heartDeseases = heartDeseases;
    this.age = age;
  }
  async post() {
    let response = await axios({
      url: "https://ajax.test-danit.com/api/v2/cards/",
      method: "post",
      data: {
        name: this.name,
        description: this.description,
        doctor: this.doctor,
        importancy: this.importancy,
        goal: this.goal,
        date: this.date,
        pressure: this.pressure,
        massIndex: this.massIndex,
        heartDeseases: this.heartDeseases,
        age: this.age,
      },
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer 04a749a6-0cb8-43ca-9511-6bc6d5fa9396`,
      },
    });
    const root = document.getElementById("cardRoot");
    const card = this.render(response.data.id);
    root.append(card);
  }

  render(id) {
    const text = document.getElementById("noCardsAdded");
    text.style.display = "none";
    const card = document.createElement("div");
    card.classList = "cards__card card";
    card.id = `visit${id}`;
    card.innerHTML = `
            <div class="card__info-wrapper">
              <div class="card__short-info">
                <h3 class="card__name">${this.name}</h3>
                <h4 class="card__doctor">${this.doctor}</h4>
              </div>
              <div class="card__options options">
                <div class="options__short">
                  <img
                    src="./dist/img/trash.png"
                    alt="delete"
                    class="options__icon"
                    id="delete${id}"
                  />
                </div>
                <div class="options__long">
                  <img
                    src="./dist/img/edit.png"
                    alt="edit"
                    class="options__icon"
                    id="edit${id}"
                  />
                </div>
              </div>
              <div class="card__full-info">
                <div class="card__element">
                  <p class="card__importancy-text card__text">Importancy:</p>
                  <p class="card__importancy-value card__value">${
                    this.importancy
                  }</p>
                </div>
                <div class="card__element">
                  <p class="card__goal-text card__text">Visit goal:</p>
                  <p class="card__goal-value card__value">
                    ${this.goal}
                  </p>
                </div>
                <div class="card__element">
                  <p class="card__description-text card__text">Description:</p>
                  <p class="card__description-value card__value">
                    ${this.description}
                  </p>
                </div>
                <div class="card__element">
                  <p class="card__date-text card__text">Due date:</p>
                  <p class="card__duedate-value card__value">${this.date
                    .split("-")
                    .reverse()
                    .join("-")}</p>
                </div>
                <div class="card__element">
                  <p class="card__pressure-text card__text">Pressure:</p>
                  <p class="card__pressure-value card__value">${
                    this.pressure
                  }</p>
                </div>
                <div class="card__element">
                  <p class="card__mass-text card__text">Mass index:</p>
                  <p class="card__mass-value card__value">${this.massIndex}</p>
                </div>
                <div class="card__element">
                  <p class="card__problems-text card__text">Heart diseases:</p>
                  <p class="card__problems-value card__value">${
                    this.heartDeseases
                  }</p>
                </div>
                <div class="card__element">
                  <p class="card__age-text card__text">Age:</p>
                  <p class="card__age-value card__value">${this.age}</p>
                </div>
              </div>
            </div>
            <p class="card__showmore" id="showmore${id}">Show more</p>
`;
    return card;
  }
  edit() {}
}
class VisitTherapist extends Visit {
  constructor(name, importancy, goal, description, date, age) {
    super(name, "Therapist", importancy, goal, description, date);
    this.age = age;
  }
  async post() {
    let response = await axios({
      url: "https://ajax.test-danit.com/api/v2/cards/",
      method: "post",
      data: {
        name: this.name,
        description: this.description,
        doctor: this.doctor,
        importancy: this.importancy,
        goal: this.goal,
        date: this.date,
        age: this.age,
      },
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer 04a749a6-0cb8-43ca-9511-6bc6d5fa9396`,
      },
    });
    const card = this.render(response.data.id);
    const root = document.getElementById("cardRoot");
    root.append(card);
  }
  async patch(id) {
    let response = await axios({
      url: `https://ajax.test-danit.com/api/v2/cards/${id}`,
      method: "put",
      data: {
        name: this.name,
        description: this.description,
        doctor: this.doctor,
        importancy: this.importancy,
        goal: this.goal,
        date: this.date,
        age: this.age,
      },
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer 04a749a6-0cb8-43ca-9511-6bc6d5fa9396`,
      },
    });
    if (response.status === 200) {
      const root = document.getElementById(`visit${id}`);
      const card = this.render(id);
      root.innerHTML = card.innerHTML;
    }
  }
  render(id) {
    const text = document.getElementById("noCardsAdded");
    text.style.display = "none";
    const card = document.createElement("div");
    card.classList = "cards__card card";
    card.id = `visit${id}`;
    card.innerHTML = `
            <div class="card__info-wrapper">
              <div class="card__short-info">
                <h3 class="card__name">${this.name}</h3>
                <h4 class="card__doctor">Therapist</h4>
              </div>
              <div class="card__options options">
                <div class="options__short">
                  <img src="./dist/img/trash.png" alt="delete" class="options__icon" id="delete${id}">
                </div>
                <div class="options__long">
                  <img src="./dist/img/edit.png" alt="edit" class="options__icon" id="edit${id}">
                </div>
              </div>
              <div class="card__full-info">
                <div class="card__element">
                  <p class="card__importancy-text card__text">Importancy:</p>
                  <p class="card__importancy-value card__value">${
                    this.importancy.charAt(0).toUpperCase() +
                    this.importancy.slice(1)
                  }</p>
                </div>
                <div class="card__element">
                  <p class="card__goal-text card__text">Visit goal:</p>
                  <p class="card__goal-value card__value">
                    ${this.goal}
                  </p>
                </div>
                <div class="card__element">
                  <p class="card__description-text card__text">Description:</p>
                  <p class="card__description-value card__value">
                   ${this.description}
                  </p>
                </div>
                <div class="card__element">
                  <p class="card__description-text card__text">Due date:</p>
                  <p class="card__duedate-value card__value">
                   ${this.date.split("-").reverse().join("-")}
                  </p>
                </div>
                <div class="card__element">
                  <p class="card__age-text card__text">Age:</p>
                  <p class="card__age-value card__value">${this.age}</p>
                </div>
              </div>
            </div>
            <p class="card__showmore" id="showmore${id}">Show more</p>`;
    return card;
  }
}

const c = new VisitTherapist(
  "name",
  "high",
  "goal",
  "desc",
  "0101-01-01",
  "12"
);
c.post();

const x = new VisitDentist("name", "high", "goal", "desc", "0101-01-01", "12");
x.post();

const switchBtn = document.getElementById("filterSwitch");
const menu = document.getElementById("filtersForm");

switchBtn.addEventListener("click", () => {
  menu.classList.toggle("main__filters--active");
});

const cards = document.getElementById("cardRoot");

cards.addEventListener("click", (e) => {
  if (e.target.id.includes("showmore")) {
    el = e.target;
    const id = "visit" + el.id.split("showmore")[1];
    document.getElementById(id).classList.toggle("card--open");
    if (document.getElementById(id).classList.contains("card--open")) {
      el.textContent = "Show less";
    } else {
      el.textContent = "Show more";
    }
  }
  if (e.target.id.includes("delete")) {
    el = e.target;
    const id = el.id.split("delete")[1];
    const visit = new VisitDelete();
    visit.delete(id);
  }
  if (
    e.target.id.includes("edit") &&
    e.target.classList.contains("options__icon")
  ) {
    if (
      e.target.closest(".card").children[0].children[0].children[1]
        .textContent === "Therapist"
    ) {
      const edit = new EditTherapist(e.target.id.split("edit")[1]);
      edit.render();
    }
  }
});

const modal = new Modal();
modal.loginModal();
